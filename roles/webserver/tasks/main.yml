- name: install nginx
  apt: name=nginx state=present
  register: new_install

# Setup apparmor
- name: create apparmor override directory
  file: name=/etc/apparmor.d/local/usr.sbin.nginx.d state=directory

- name: install apparmor profile
  copy: src=etc/apparmor.d/usr.sbin.nginx dest=/etc/apparmor.d/usr.sbin.nginx
  notify:
    - aa-enforce nginx
    - systemctl restart nginx

# Remove the default configuration
- name: Remove default nginx config
  file: name=/etc/nginx/sites-enabled/default state=absent
  become: true
  notify: systemctl reload nginx

- name: install new nginx.conf
  copy: src=etc/nginx/nginx.conf dest=/etc/nginx/nginx.conf
  notify: systemctl reload nginx

# Setup letsencrypt / http redirects
- name: install http site
  copy: src=etc/nginx/sites-available/http dest=/etc/nginx/sites-available/http
  become: true
  notify: systemctl reload nginx

- name: enable http site
  file: src=../sites-available/http path=/etc/nginx/sites-enabled/http state=link
  notify: systemctl reload nginx

- name: create letsencrypt directory
  file: name=/var/www/letsencrypt state=directory
  become: true

- name: setup dhparams
  copy:
    content: |
      -----BEGIN DH PARAMETERS-----
      MIIBCAKCAQEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
      +8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
      87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
      YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
      7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
      ssbzSibBsu/6iGtCOGEoXJf//////////wIBAg==
      -----END DH PARAMETERS-----
    dest: /etc/letsencrypt/dhparam.pem
  notify: systemctl reload nginx

# Register other sites
- name: Make registered sites available
  template: src=site.j2 dest=/etc/nginx/sites-available/{{item.cname}}
  loop: "{{ domains | default([{'cname': inventory_hostname, 'alias': []}]) }}"
  notify: systemctl reload nginx

- name: enable registered sites
  file: src=../sites-available/{{item.cname}} dest=/etc/nginx/sites-enabled/{{item.cname}} state=link
  loop: "{{ domains | default([{'cname': inventory_hostname, 'alias': []}]) }}"
  notify: systemctl reload nginx

- name: create site directories
  file: name=/var/www/{{item.cname}} state=directory
  loop: "{{ domains | default([{'cname': inventory_hostname, 'alias': []}]) }}"

# Enable custom configuration rules
- name: Make registered sites available
  copy:
    content: |
      # Ansible managed
      {{item.nginx_apparmor | default('') }}
    dest: /etc/apparmor.d/local/usr.sbin.nginx.d/{{item.cname}}
  loop: "{{ domains | default([{'cname': inventory_hostname, 'alias': []}]) }}"
  notify:
    - aa-enforce nginx
    - systemctl restart nginx


# Enable custom configuration rules
- name: Make registered sites available
  copy:
    content: |
      # Ansible managed
      {{item.value}}
    dest: /etc/nginx/conf.d/{{item.key}}.conf
  with_dict: "{{ nginx_conf | default({}) }}"
  notify: systemctl reload nginx

# Enable port in firewall
- ufw: rule=allow name="Nginx Full"

- name: Force reload nginx
  service: name=nginx state=reloaded
  when: new_install.changed

# Final service availability tests
- name: Ensure nginx is started and enabled
  service: name=nginx state=started enabled=true

- name: Ensure nginx is listening on port 80
  wait_for: host="{{ inventory_hostname }}" port=80 timeout=1
  delegate_to: localhost
  tags: assert

- name: Ensure nginx is listening on port 443
  wait_for: host="{{ inventory_hostname }}" port=443 timeout=1
  delegate_to: localhost
  tags: assert


- name: install certbot deploy hook
  copy:
    content: |
      #!/bin/sh
      systemctl reload nginx
    dest: /etc/letsencrypt/renewal-hooks/deploy/nginx
    mode: 0755
